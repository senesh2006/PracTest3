import random
import time
from enum import Enum

class FlowerStatus(Enum):
    FRESH = 1
    DEPLETED = 2

class BeeActivity(Enum):
    EXPLORING = 1
    COLLECTING = 2
    RETURNING = 3
    RECOVERING = 4

class Flower:
    def __init__(self, id, color):
        self.id = id
        self.original_color = color
        self.current_color = color
        self.status = FlowerStatus.FRESH
        self.nectar = random.randint(3, 6)
    
    def collect_nectar(self):
        if self.status == FlowerStatus.FRESH:
            self.nectar -= 1
            if self.nectar <= 0:
                self.status = FlowerStatus.DEPLETED
                self.current_color = "gray"
            return True
        return False
    
    def replenish(self):
        if random.random() < 0.2:  # 20% chance to replenish each check
            self.status = FlowerStatus.FRESH
            self.nectar = random.randint(3, 6)
            self.current_color = self.original_color
            return True
        return False

class Bee:
    def __init__(self, id, hive):
        self.id = id
        self.hive = hive
        self.activity = BeeActivity.EXPLORING
        self.target = None
        self.nectar = 0
        self.max_nectar = 5
        self.recovery_time = 0
    
    def update(self, flowers, water_sources):
        if self.recovery_time > 0:
            self.recovery_time -= 1
            if self.recovery_time == 0:
                self.activity = BeeActivity.EXPLORING
            return
        
        if self.activity == BeeActivity.EXPLORING:
            # 15% chance to encounter water (like in Daly River ecosystem)
            if random.random() < 0.15 and water_sources:
                self.target = random.choice(water_sources)
                self.activity = BeeActivity.COLLECTING
            else:
                # Find a fresh flower
                fresh_flowers = [f for f in flowers if f.status == FlowerStatus.FRESH]
                if fresh_flowers:
                    self.target = random.choice(fresh_flowers)
                    self.activity = BeeActivity.COLLECTING
        
        elif self.activity == BeeActivity.COLLECTING:
            if isinstance(self.target, Flower):
                if self.target.collect_nectar():
                    self.nectar += 1
                    print(f"Bee {self.id} collected nectar from flower {self.target.id} (color: {self.target.current_color})")
                    if self.nectar >= self.max_nectar:
                        self.activity = BeeActivity.RETURNING
                else:
                    print(f"Bee {self.id} found flower {self.target.id} depleted (color: {self.target.current_color})")
                    self.activity = BeeActivity.EXPLORING
                    self.target = None
            elif isinstance(self.target, str):  # Water source
                print(f"Bee {self.id} encountered water at {self.target}! Returning to hive.")
                self.activity = BeeActivity.RETURNING
                self.recovery_time = 3  # Recovery period after water encounter
        
        elif self.activity == BeeActivity.RETURNING:
            self.hive.honey += self.nectar
            print(f"Bee {self.id} returned to hive with {self.nectar} nectar. Total honey: {self.hive.honey}")
            self.nectar = 0
            self.activity = BeeActivity.EXPLORING
            self.target = None

class Hive:
    def __init__(self):
        self.honey = 0

def simulate_ecosystem(duration=60):
    # Initialize ecosystem
    hive = Hive()
    bees = [Bee(i, hive) for i in range(1, 6)]
    flowers = [Flower(i, random.choice(["red", "blue", "yellow", "purple"])) for i in range(1, 11)]
    water_sources = ["Daly River", "Billabong", "Creek"]
    
    print("Starting ecosystem simulation (inspired by First Nations water knowledge)")
    print(f"Initial state: {len(bees)} bees, {len(flowers)} flowers, {len(water_sources)} water sources")
    
    for tick in range(1, duration + 1):
        print(f"\n--- Time period {tick} ---")
        
        # Update all flowers (seasonal replenishment)
        for flower in flowers:
            if flower.status == FlowerStatus.DEPLETED:
                if flower.replenish():
                    print(f"Flower {flower.id} replenished to color {flower.current_color}")
        
        # Update all bees
        for bee in bees:
            bee.update(flowers, water_sources)
        
        time.sleep(1)  # Pause between time periods
    
    print("\nSimulation complete!")
    print(f"Final hive honey: {hive.honey}")
    print("Flower states:")
    for flower in flowers:
        print(f"Flower {flower.id}: color {flower.current_color}, nectar {flower.nectar}/5")

if __name__ == "__main__":
    simulate_ecosystem()
