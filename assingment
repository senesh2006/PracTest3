import pygame
import random
import math

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Bee Ecosystem Simulation - Inspired by First Nations Water Knowledge")

# Colors
SKY_BLUE = (135, 206, 235)
EARTH_BROWN = (139, 69, 19)
WATER_BLUE = (64, 164, 223)
HIVE_YELLOW = (244, 196, 48)
FLOWER_COLORS = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0)]
DEPLETED_FLOWER = (200, 200, 200)  # Gray color for depleted flowers
BEE_YELLOW = (255, 255, 0)
BLACK = (0, 0, 0)

# Game parameters
FPS = 60
clock = pygame.time.Clock()

class Flower:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 10
        self.color = random.choice(FLOWER_COLORS)
        self.has_nectar = True
        self.original_color = self.color
        
    def draw(self):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
        pygame.draw.circle(screen, BLACK, (self.x, self.y), self.radius, 1)
        
    def deplete(self):
        self.has_nectar = False
        self.color = DEPLETED_FLOWER
        
    def replenish(self):
        self.has_nectar = True
        self.color = self.original_color

class WaterSource:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)
        
    def draw(self):
        pygame.draw.rect(screen, WATER_BLUE, self.rect)
        pygame.draw.rect(screen, BLACK, self.rect, 1)

class Bee:
    def __init__(self, x, y, hive):
        self.x = x
        self.y = y
        self.hive = hive
        self.target = None
        self.speed = 2
        self.nectar = 0
        self.max_nectar = 5
        self.returning_to_hive = False
        self.in_water = False
        self.water_recovery_time = 0
        
    def move(self):
        if self.water_recovery_time > 0:
            self.water_recovery_time -= 1
            if self.water_recovery_time == 0:
                self.in_water = False
            return
            
        if self.returning_to_hive:
            # Move toward hive
            dx = self.hive.x - self.x
            dy = self.hive.y - self.y
            dist = max(1, math.sqrt(dx*dx + dy*dy))
            dx, dy = dx/dist, dy/dist
            self.x += dx * self.speed
            self.y += dy * self.speed
            
            # Check if reached hive
            if math.sqrt((self.hive.x-self.x)**2 + (self.hive.y-self.y)**2) < 20:
                self.returning_to_hive = False
                self.nectar = 0
        elif self.target:
            # Move toward target
            if isinstance(self.target, Flower) and not self.target.has_nectar:
                self.target = None
                return
                
            dx = self.target.x - self.x
            dy = self.target.y - self.y
            dist = max(1, math.sqrt(dx*dx + dy*dy))
            dx, dy = dx/dist, dy/dist
            self.x += dx * self.speed
            self.y += dy * self.speed
            
            # Check if reached target
            if isinstance(self.target, Flower):
                if dist < self.target.radius + 5:
                    if self.target.has_nectar:
                        self.nectar += 1
                        self.target.deplete()
                        self.returning_to_hive = True
            elif isinstance(self.target, WaterSource):
                if self.target.rect.collidepoint(self.x, self.y):
                    self.in_water = True
                    self.water_recovery_time = FPS * 2  # 2 seconds to recover
                    self.returning_to_hive = True
        else:
            # Random wandering
            self.x += random.uniform(-self.speed, self.speed)
            self.y += random.uniform(-self.speed, self.speed)
            
            # Keep within bounds
            self.x = max(0, min(WIDTH, self.x))
            self.y = max(0, min(HEIGHT, self.y))
            
    def draw(self):
        pygame.draw.circle(screen, BEE_YELLOW, (int(self.x), int(self.y)), 5)
        pygame.draw.circle(screen, BLACK, (int(self.x), int(self.y)), 5, 1)
        
        # Draw nectar indicator
        if self.nectar > 0:
            pygame.draw.rect(screen, (139, 69, 19), (self.x-5, self.y-10, 10, 2))
            pygame.draw.rect(screen, (255, 215, 0), (self.x-5, self.y-10, 10 * (self.nectar/self.max_nectar), 2))

class Hive:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 20
        self.honey = 0
        
    def draw(self):
        pygame.draw.circle(screen, HIVE_YELLOW, (self.x, self.y), self.radius)
        pygame.draw.circle(screen, BLACK, (self.x, self.y), self.radius, 2)
        
        # Draw honey indicator
        pygame.draw.rect(screen, (139, 69, 19), (self.x-25, self.y+30, 50, 5))
        pygame.draw.rect(screen, (255, 215, 0), (self.x-25, self.y+30, 50 * min(1, self.honey/100), 5))

def main():
    # Create objects
    hive = Hive(WIDTH//2, HEIGHT//2)
    bees = [Bee(WIDTH//2, HEIGHT//2, hive) for _ in range(5)]
    flowers = [Flower(random.randint(50, WIDTH-50), random.randint(50, HEIGHT-50)) for _ in range(15)]
    water = WaterSource(100, 100, 200, 50)
    
    # Main game loop
    running = True
    while running:
        clock.tick(FPS)
        
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
                elif event.key == pygame.K_r:
                    # Replenish all flowers
                    for flower in flowers:
                        flower.replenish()
        
        # Update bees
        for bee in bees:
            # Find new target if needed
            if not bee.target and not bee.returning_to_hive and not bee.in_water:
                # 10% chance to check for water (like in the Daly River ecosystem)
                if random.random() < 0.1:
                    bee.target = water
                else:
                    # Find a flower with nectar
                    available_flowers = [f for f in flowers if f.has_nectar]
                    if available_flowers:
                        bee.target = random.choice(available_flowers)
            
            bee.move()
            
            # If bee delivered nectar to hive
            if not bee.returning_to_hive and bee.nectar == 0 and bee.target is None:
                hive.honey += 1
        
        # Occasionally replenish flowers (like seasonal cycles in Ngan'gi calendar)
        if random.random() < 0.01:
            for flower in flowers:
                if random.random() < 0.3:  # 30% chance to replenish each depleted flower
                    flower.replenish()
        
        # Draw everything
        screen.fill(SKY_BLUE)
        
        # Draw ground
        pygame.draw.rect(screen, EARTH_BROWN, (0, HEIGHT-50, WIDTH, 50))
        
        water.draw()
        hive.draw()
        
        for flower in flowers:
            flower.draw()
            
        for bee in bees:
            bee.draw()
        
        # Draw instructions
        font = pygame.font.SysFont(None, 24)
        text = font.render("Press R to replenish flowers (simulate seasonal change)", True, BLACK)
        screen.blit(text, (10, 10))
        
        text = font.render(f"Honey: {hive.honey}", True, BLACK)
        screen.blit(text, (WIDTH-150, 10))
        
        pygame.display.flip()
    
    pygame.quit()

if __name__ == "__main__":
    main()
