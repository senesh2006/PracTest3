# Student Name: <put your name here> 
# Student ID:   <put your ID here>
#
# beeworld.py - simulation of bee colony in a world with trees and flowers
#
# Version information: 
#
# Usage: <how to run the program>
#
import matplotlib.pyplot as plt
import numpy as np
from buzzness import Bee

def plot_hive(hive, blist, ax):
    # Create a brown background for hive
    ax.imshow(hive.T, origin="lower", cmap="YlOrBr")
    
    # Draw bees in the hive with yellow circles
    xvalues = [b.get_pos()[0] for b in blist if b.get_inhive()]
    yvalues = [b.get_pos()[1] for b in blist if b.get_inhive()]
    ax.scatter(xvalues, yvalues, c='yellow', s=50)
    
    # Set axis labels
    ax.set_xlabel("X Position")
    ax.set_ylabel("Y Position")
    
    # Set title
    ax.set_title("Bee Hive")

def plot_world(world, blist, ax):
    # Create a green background for world
    ax.imshow(world.T, origin="lower", cmap="Greens", vmin=3, vmax=6)
    
    # Draw features
    # Add blue pond
    ax.add_patch(plt.Rectangle((30, 5), 10, 5, color="blue"))
    
    # Add gray square
    ax.add_patch(plt.Rectangle((15, 30), 5, 5, color="gray"))
    
    # Add white square
    ax.add_patch(plt.Rectangle((20, 20), 2, 2, color="white"))
    
    # Add green bars for trees
    for i in range(4):
        ax.add_patch(plt.Rectangle((i+1, 1), 1, 3, color="green"))
    
    # Add magenta dots for flowers in grid pattern
    for x in range(30, 42, 2):
        for y in range(5, 40, 2):
            ax.scatter(x, y, c='magenta', s=15, marker='s')
    
    # Draw bees that are outside the hive
    xvalues = [b.get_pos()[0] for b in blist if not b.get_inhive()]
    yvalues = [b.get_pos()[1] for b in blist if not b.get_inhive()]
    ax.scatter(xvalues, yvalues, c='yellow', s=50)
    
    # Set axis labels
    ax.set_xlabel("X Position")
    ax.set_ylabel("Y Position")
    
    # Set title
    ax.set_title("Property")

# Set simulation parameters
timestep = 2  # Current timestep number
worldX, worldY = 45, 40
hiveX, hiveY = 30, 25

# Create hive grid
hive = np.ones((hiveX, hiveY)) * 10
for x in range(hiveX):
    for y in range(hiveY):
        if 13 <= x < 16:
            hive[x, y] = 0
            if x == 14 and y % 2 == 0:
                hive[x, y] = 5

# Create world grid (basic green background)
world = np.ones((worldX, worldY)) * 5

# Create bees with positions matching the image
blist = []
# For bees in the hive (left plot)
hive_bee_positions = [(5, 11), (5, 16), (9, 14)]
for i, pos in enumerate(hive_bee_positions):
    bee = Bee(f"bee{i+1}", pos)
    bee.set_inhive(True)
    blist.append(bee)

# For bees outside the hive (right plot)
world_bee_positions = [(10, 16), (16, 16)]
for i, pos in enumerate(world_bee_positions):
    bee = Bee(f"bee{i+4}", pos)
    bee.set_inhive(False)
    blist.append(bee)

# Create the plot
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Plot the hive and world
plot_hive(hive, blist, axes[0])
plot_world(world, blist, axes[1])

# Set the main title
fig.suptitle(f"BEE WORLD - Timestep {timestep}", fontsize=16)

# Adjust layout
plt.tight_layout()
plt.subplots_adjust(top=0.9)

# Save and show the figure
plt.savefig("beeworld_timestep2.png")
plt.show()
